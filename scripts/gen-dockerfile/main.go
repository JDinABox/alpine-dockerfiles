package main

import (
	"bytes"
	_ "embed"
	"flag"
	"io/ioutil"
	"log"
	"strings"

	"github.com/valyala/fasttemplate"
)

var (
	coreModule string
	codeModule string
	codeRoot   string
	workDir    string
	apks       string
)

func init() {
	flag.StringVar(&coreModule, "c", "", "Golang module name (required)")
	flag.StringVar(&codeModule, "m", "", "Golang sub module name (required)")
	flag.StringVar(&codeRoot, "r", "", "Path to code root on disk (required)")
	flag.StringVar(&workDir, "w", "data", "WorkDir path")
	flag.StringVar(&apks, "a", "", "Apks to install")
	flag.Parse()

	// TODO: allow running in code root folder without flags
	// Exit with error if required flags are empty
	if codeModule == "" || codeRoot == "" {
		log.Fatalln("Missing -m (code module) and/or -r (code root)")
	}

	// Trim / from flags
	codeModule = strings.Trim(codeModule, "/")
	workDir = strings.Trim(workDir, "/")
	// Trim spaces
	apks = strings.TrimSpace(apks)
}

//go:embed Dockerfile
var wgDockerfile string

func main() {
	wGT := fasttemplate.New(wgDockerfile, "{{", "}}")

	var b bytes.Buffer

	b.WriteString("# Auto generated by github.com/jdinabox/alpine-dockerfiles\n\n")
	b.WriteString(wGT.ExecuteString(map[string]interface{}{
		"coreModule": coreModule,
		"codeModule": codeModule,
		"workDir":    workDir,
		"apk-add":    apks,
	}))

	ioutil.WriteFile(codeRoot+"/"+codeModule+".Dockerfile", b.Bytes(), 0644)
}
